{"ast":null,"code":"var _jsxFileName = \"/Users/odagyeong/Documents/Atlantis/client/src/Pages/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useSelector } from \"react-redux\"; // import { useDispatch } from \"react-redux\";\n\nimport { emailIsValid, passwordIsValid } from \"../Utils/Validator\";\nimport \"./Style/Login.css\";\nimport Navigation from \"../Components/Navigation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Login() {\n  _s();\n\n  const [id, setId] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const navigate = useNavigate(); // const dispatch = useDispatch();\n\n  const userState = useSelector(state => state.user);\n  const API_URL = process.env.REACT_APP_API_URL; // Login\n\n  const handleLogin = () => {\n    if (id === \"\" && password === \"\") {\n      setErrorMessage(\"이메일과 비밀번호를 입력해주세요\");\n      return;\n    } else if (id === \"\") {\n      setErrorMessage(\"이메일을 입력해주세요\");\n      return;\n    } else if (password === \"\") {\n      setErrorMessage(\"비밀번호를 입력해주세요\");\n      return;\n    } // email 과 비밀번호가 올바른 형식이 아닌 경우\n\n\n    if (!emailIsValid(id)) {\n      setErrorMessage(\"올바른 이메일 형식이 아닙니다\");\n    }\n\n    if (!passwordIsValid(password)) {\n      setErrorMessage(\"비밀번호는 숫자와 영문을 포함한 8글자 이상으로 이루어져야 합니다\");\n    }\n\n    axios({\n      method: \"POST\",\n      url: `${API_URL}/user/login`,\n      data: {\n        email: id,\n        password: password\n      },\n      withCredentials: true\n    }).then(res => {\n      setErrorMessage(\"\");\n      const {\n        userInfo\n      } = res.data.data; // dispatch(setUserInfo(userInfo));\n\n      navigate.push(\"/main\");\n    }).catch(err => {\n      setErrorMessage(\"로그인 실패! 이메일과 비밀번호를 다시 확인하세요\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Login, \"0mT0SvsZg36ttJZgUsbwt6Gf/Ds=\", false, function () {\n  return [useNavigate, useSelector];\n});\n\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/odagyeong/Documents/Atlantis/client/src/Pages/Login.js"],"names":["React","useState","useEffect","useNavigate","axios","useSelector","emailIsValid","passwordIsValid","Navigation","Login","id","setId","password","setPassword","errorMessage","setErrorMessage","navigate","userState","state","user","API_URL","process","env","REACT_APP_API_URL","handleLogin","method","url","data","email","withCredentials","then","res","userInfo","push","catch","err"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B,C,CACA;;AACA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,oBAA9C;AAEA,OAAO,mBAAP;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC9B,QAAM,CAACC,EAAD,EAAKC,KAAL,IAAcV,QAAQ,CAAC,EAAD,CAA5B;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAC,EAAD,CAAhD;AAEA,QAAMe,QAAQ,GAAGb,WAAW,EAA5B,CAL8B,CAM9B;;AACA,QAAMc,SAAS,GAAGZ,WAAW,CAACa,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAA7B;AACA,QAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B,CAR8B,CAU9B;;AACA,QAAMC,WAAW,GAAG,MAAM;AACxB,QAAId,EAAE,KAAK,EAAP,IAAaE,QAAQ,KAAK,EAA9B,EAAkC;AAChCG,MAAAA,eAAe,CAAC,mBAAD,CAAf;AACA;AACD,KAHD,MAGO,IAAIL,EAAE,KAAK,EAAX,EAAe;AACpBK,MAAAA,eAAe,CAAC,aAAD,CAAf;AACA;AACD,KAHM,MAGA,IAAIH,QAAQ,KAAK,EAAjB,EAAqB;AAC1BG,MAAAA,eAAe,CAAC,cAAD,CAAf;AACA;AACD,KAVuB,CAYxB;;;AACA,QAAI,CAACT,YAAY,CAACI,EAAD,CAAjB,EAAuB;AACrBK,MAAAA,eAAe,CAAC,kBAAD,CAAf;AACD;;AACD,QAAI,CAACR,eAAe,CAACK,QAAD,CAApB,EAAgC;AAC9BG,MAAAA,eAAe,CAAC,sCAAD,CAAf;AACD;;AAEDX,IAAAA,KAAK,CAAC;AACJqB,MAAAA,MAAM,EAAE,MADJ;AAEJC,MAAAA,GAAG,EAAG,GAAEN,OAAQ,aAFZ;AAGJO,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAElB,EADH;AAEJE,QAAAA,QAAQ,EAAEA;AAFN,OAHF;AAOJiB,MAAAA,eAAe,EAAE;AAPb,KAAD,CAAL,CASGC,IATH,CASQC,GAAG,IAAI;AACXhB,MAAAA,eAAe,CAAC,EAAD,CAAf;AACA,YAAM;AAAEiB,QAAAA;AAAF,UAAeD,GAAG,CAACJ,IAAJ,CAASA,IAA9B,CAFW,CAGX;;AACAX,MAAAA,QAAQ,CAACiB,IAAT,CAAc,OAAd;AACD,KAdH,EAeGC,KAfH,CAeUC,GAAD,IAAS;AACdpB,MAAAA,eAAe,CAAC,6BAAD,CAAf;AAEH,KAlBD;AAmBD,GAvCD;;AAyCA,sBACE;AAAA,4BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GA1DuBN,K;UAKLN,W,EAECE,W;;;KAPII,K","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useSelector } from \"react-redux\";\n// import { useDispatch } from \"react-redux\";\nimport { emailIsValid, passwordIsValid } from \"../Utils/Validator\";\n\nimport \"./Style/Login.css\";\nimport Navigation from \"../Components/Navigation\";\n\nexport default function Login() {\n  const [id, setId] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const navigate = useNavigate();\n  // const dispatch = useDispatch();\n  const userState = useSelector(state => state.user);\n  const API_URL = process.env.REACT_APP_API_URL;\n\n  // Login\n  const handleLogin = () => {\n    if (id === \"\" && password === \"\") {\n      setErrorMessage(\"이메일과 비밀번호를 입력해주세요\");\n      return;\n    } else if (id === \"\") {\n      setErrorMessage(\"이메일을 입력해주세요\");\n      return;\n    } else if (password === \"\") {\n      setErrorMessage(\"비밀번호를 입력해주세요\");\n      return;\n    }\n\n    // email 과 비밀번호가 올바른 형식이 아닌 경우\n    if (!emailIsValid(id)) {\n      setErrorMessage(\"올바른 이메일 형식이 아닙니다\");\n    }\n    if (!passwordIsValid(password)) {\n      setErrorMessage(\"비밀번호는 숫자와 영문을 포함한 8글자 이상으로 이루어져야 합니다\");\n    }\n\n    axios({\n      method: \"POST\",\n      url: `${API_URL}/user/login`,\n      data: {\n        email: id,\n        password: password,\n      },\n      withCredentials: true,\n    })\n      .then(res => {\n        setErrorMessage(\"\");\n        const { userInfo } = res.data.data;\n        // dispatch(setUserInfo(userInfo));\n        navigate.push(\"/main\");\n      })\n      .catch((err) => {\n        setErrorMessage(\"로그인 실패! 이메일과 비밀번호를 다시 확인하세요\");\n\n    })\n  }\n\n  return (\n    <div>\n      <Navigation />\n      <p>login</p>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}